WEBVTT

00:00:01.056 --> 00:00:03.386 align:middle
¡Muy bien! ¡Hemos hecho nuestra
primera petición a la API!

00:00:03.696 --> 00:00:06.466 align:middle
Esto genera una URL de pago
única para nuestro cliente

00:00:06.536 --> 00:00:09.726 align:middle
y abre la página de pago de LemonSqueezy
para que pueda comprar el producto.

00:00:10.426 --> 00:00:13.296 align:middle
Pero cuando configuramos esto,
codificamos muchas cosas.

00:00:13.566 --> 00:00:14.906 align:middle
¡Es hora de hacerlo dinámico!

00:00:14.906 --> 00:00:16.836 align:middle
Empecemos con el ID de la tienda.

00:00:17.226 --> 00:00:19.716 align:middle
Es único para nuestros
entornos de prueba y real,

00:00:19.856 --> 00:00:22.206 align:middle
así que tiene sentido establecerlo
como variable de entorno.

00:00:22.756 --> 00:00:26.766 align:middle
Abre el archivo .env y, debajo
de LEMON_SQUEEZY_API_KEY,

00:00:26.896 --> 00:00:32.066 align:middle
escribe LEMON_SQUEEZY_STORE_ID= y establece
ese valor como el ID de la tienda.

00:00:32.356 --> 00:00:36.326 align:middle
Puedes encontrarlo en OrderController.php.

00:00:36.326 --> 00:00:44.466 align:middle
Ahora, en config/services.yaml, debajo de parameters,
añade uno nuevo - env(LEMON_SQUEEZY_STORE_ID) -

00:00:44.896 --> 00:00:49.316 align:middle
y establécelo como
%env(LEMON_SQUEEZY_STORE_ID)%’.

00:00:49.956 --> 00:00:52.396 align:middle
De vuelta en nuestro controlador,
sustituye el valor ID

00:00:52.536 --> 00:00:57.906 align:middle
por $this->getParameter('env(LEMON_SQUEEZY_STORE_ID)').
Para

00:00:57.906 --> 00:01:02.736 align:middle
el ID de la variante, vamos a crear un
nuevo campo en la entidad Product. En

00:01:03.496 --> 00:01:08.836 align:middle
tu terminal, ejecuta: bin/console
make:entity Actualiza la entidad Product, y

00:01:08.936 --> 00:01:11.386 align:middle
llama al nuevo campo lsVariantId.

00:01:11.386 --> 00:01:17.006 align:middle
Será un string, con una longitud de campo
por defecto, y hagámoslo "anulable". Pulsa

00:01:17.686 --> 00:01:23.036 align:middle
Enter para terminar y luego dirígete a
src/Entity/Product.php para ver nuestros cambios.

00:01:23.826 --> 00:01:24.746 align:middle
Si nos desplazamos hacia abajo... ¡ah,

00:01:25.586 --> 00:01:26.766 align:middle
ahí está!

00:01:27.136 --> 00:01:28.846 align:middle
Probablemente también
deberíamos hacer esto unique. ¡

00:01:30.586 --> 00:01:31.186 align:middle
Tiene buena pinta!

00:01:31.916 --> 00:01:34.846 align:middle
Aquí abajo, podemos ver que también ha
creado un getter y un setter. ¡Qué práctico!

00:01:35.366 --> 00:01:36.146 align:middle
Ahora,

00:01:36.806 --> 00:01:39.396 align:middle
de vuelta en nuestro terminal, crea
una migración con: bin/console

00:01:39.716 --> 00:01:43.616 align:middle
make:migration ¡Vamos a comprobarlo! En

00:01:44.076 --> 00:01:45.076 align:middle
migrations/...

00:01:45.846 --> 00:01:46.596 align:middle
aquí abajo..

00:01:47.586 --> 00:01:49.256 align:middle
. parece que se ha añadido
una nueva columna. ¡Qué bien!

00:01:50.036 --> 00:01:57.156 align:middle
Aquí arriba, podemos añadir una descripción: Añadir una
columna para almacenar el ID de variante LS en Producto. De vuelta

00:01:59.116 --> 00:02:07.476 align:middle
a nuestro terminal, ejecuta la migración con:
bin/console doctrine:migrations:migrate Ahora, en

00:02:07.626 --> 00:02:11.896 align:middle
src/DataFixtures/AppFixtures.php,
establece nuestro nuevo campo en

00:02:11.896 --> 00:02:14.456 align:middle
el ID de variante del panel
de control de LemonSqueezy.

00:02:16.316 --> 00:02:20.476 align:middle
Puedes encontrarlo haciendo clic en "Tienda",
"Productos", los tres puntos al final de

00:02:20.476 --> 00:02:23.436 align:middle
nuestro producto aquí, y seleccionando
"Copiar ID de variante". Pégalo

00:02:23.906 --> 00:02:24.876 align:middle
y... ¡tachán!

00:02:25.306 --> 00:02:27.366 align:middle
¡El primero está hecho! Pero,

00:02:27.466 --> 00:02:29.806 align:middle
¿qué clase de puesto de
limonada de diseño seríamos si

00:02:29.806 --> 00:02:32.236 align:middle
sólo tuviéramos un tipo
de limonada para elegir? ¡

00:02:32.706 --> 00:02:34.636 align:middle
Añadamos más en función
de nuestros accesorios! Copia

00:02:35.146 --> 00:02:39.216 align:middle
esta descripción y, de nuevo en nuestro
panel de control, crea un nuevo producto.

00:02:40.126 --> 00:02:43.586 align:middle
A éste lo llamaremos "Limonada electrónica
de sandía" y pégalo. Establece

00:02:43.586 --> 00:02:51.956 align:middle
el precio en "1,99 $", añade una
imagen y "Publica el producto". Copia

00:02:54.386 --> 00:03:02.556 align:middle
el ID de variante de nuestro nuevo producto y añádelo
a nuestro producto en AppFixtures.php. ¡Estupendo!

00:03:02.556 --> 00:03:05.716 align:middle
Hagamos lo mismo con los cuatro
productos siguientes. ¡Listo!

00:03:07.156 --> 00:03:15.916 align:middle
Ahora vamos a recargar los accesorios con:
bin/console doctrine:fixtures:load De vuelta en

00:03:15.916 --> 00:03:21.656 align:middle
el controlador, dentro de createLsCheckoutUrl(),
recupera los productos del carrito de la compra con

00:03:21.656 --> 00:03:25.146 align:middle
$products = $cart->getProducts(). Y

00:03:25.566 --> 00:03:30.946 align:middle
estableceremos $variantId en
$products[0]->getLsVariantId() por ahora. Por último

00:03:30.946 --> 00:03:36.336 align:middle
, debajo de $response, establece el ID de la
variante en una variable $variantId. Bien,

00:03:37.176 --> 00:03:38.706 align:middle
¡intentemos pasar por caja!

00:03:39.076 --> 00:03:41.506 align:middle
Vuelve a la página de inicio y elige
esta vez un nuevo producto. Establece

00:03:41.826 --> 00:03:45.706 align:middle
la cantidad en "2", añádelo al carrito y
haz clic en el botón de pago. ¡Qué bien!

00:03:47.136 --> 00:03:51.046 align:middle
Estamos en la página de pago, y éste
es el producto correcto pero... no

00:03:51.286 --> 00:03:52.566 align:middle
la cantidad correcta. Para

00:03:53.216 --> 00:03:57.906 align:middle
solucionarlo, de vuelta en nuestro código, bajo
type, añade attributes. .. checkout_data...

00:03:59.476 --> 00:04:00.336 align:middle
variant_quantities...

00:04:01.746 --> 00:04:03.006 align:middle
otra

00:04:04.096 --> 00:04:06.456 align:middle
matriz vacía, y dentro de ella, escribe

00:04:06.756 --> 00:04:12.896 align:middle
variant_id => $variantId y
quantity => $quantity. Arriba,

00:04:13.556 --> 00:04:20.176 align:middle
debajo de variantId, añade $quantity
= $cart->getProductQuantity() con

00:04:20.566 --> 00:04:22.356 align:middle
$products[0] como argumento. Si

00:04:23.646 --> 00:04:26.286 align:middle
vamos a la página del carrito y volvemos
a pulsar el botón "pagar"... ¡sí!

00:04:28.816 --> 00:04:31.976 align:middle
¡Tenemos el producto correcto
y la cantidad correcta!

00:04:32.626 --> 00:04:33.446 align:middle
Si me desplazo hacia arriba... hm...

00:04:33.826 --> 00:04:35.896 align:middle
¿de dónde viene este correo electrónico?

00:04:36.486 --> 00:04:40.566 align:middle
Soy un propietario autenticado de una tienda
LemonSqueezy, así que ya está rellenado para mí. Pero,

00:04:40.836 --> 00:04:43.916 align:middle
¿y si intento pagar como
cliente en modo incógnito?

00:04:44.516 --> 00:04:46.566 align:middle
Abriré una nueva pestaña
en modo incógnito, iniciaré

00:04:46.806 --> 00:04:51.426 align:middle
sesión de nuevo con lemon@example.com
/ lemonpass como contraseña. Ahora

00:04:52.646 --> 00:04:57.886 align:middle
elijo un producto, la cantidad, lo añado al
carrito, hago clic en "pasar por caja", y... ¡ajá!

00:04:59.386 --> 00:05:01.596 align:middle
¡Los datos del usuario están vacíos!

00:05:02.236 --> 00:05:05.236 align:middle
El usuario puede rellenarlos él mismo,
así que no es un gran problema, pero

00:05:05.546 --> 00:05:08.636 align:middle
apuesto a que podemos ahorrarle algo de tiempo y rellenarlos
previamente desde nuestra aplicación, puesto que

00:05:08.826 --> 00:05:11.346 align:middle
ya compartió su nombre y correo
electrónico cuando se registró.

00:05:11.656 --> 00:05:12.336 align:middle
Hagámoslo

00:05:12.876 --> 00:05:21.696 align:middle
En OrderController::checkout(), añade un nuevo
argumento - #[CurrentUser] ?User $user - y

00:05:22.126 --> 00:05:25.306 align:middle
más abajo, pasa $user a createLsCheckoutUrl().

00:05:26.126 --> 00:05:30.876 align:middle
Aquí abajo, en ese método, añade un
tercer argumento: ?User $user . Debajo

00:05:30.876 --> 00:05:38.366 align:middle
de$quantity, añade $attributes
= y ajústalo a la matriz de

00:05:38.366 --> 00:05:40.326 align:middle
atributos de las opciones de la petición.

00:05:40.676 --> 00:05:42.576 align:middle
Podemos copiar y pegar esto
para hacerlo más fácil.

00:05:45.946 --> 00:05:51.446 align:middle
Lo pondremos en $attributes, y
aquí arriba, añade if ($user).

00:05:52.606 --> 00:05:53.146 align:middle
Dentro, escribe

00:05:53.146 --> 00:05:59.846 align:middle
$attributes['checkout_data']['email']
= $user->getEmail(). Y

00:05:59.846 --> 00:06:07.996 align:middle
debajo, $attributes['checkout_data']['name']
= $user->getFirstName(). ¡Perfecto!

00:06:08.916 --> 00:06:12.306 align:middle
Probemos de nuevo a realizar
la compra en modo incógnito.

00:06:12.666 --> 00:06:16.456 align:middle
Vuelve a la página de inicio, haz clic en el carrito
donde ya tenemos dos artículos esperando, haz clic en

00:06:16.886 --> 00:06:18.416 align:middle
el botón de pago y... ¡los

00:06:18.966 --> 00:06:20.506 align:middle
datos del usuario ya están
rellenados! ¡Fantástico!

00:06:20.876 --> 00:06:25.636 align:middle
Hasta ahora, sólo hemos probado a
comprar un sabor de limonada cada vez.

00:06:26.066 --> 00:06:28.116 align:middle
Intentemos comprar más de
un tipo a continuación.
