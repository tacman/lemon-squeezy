{
    "steps": [
        {
            "id": "start",
            "name": "start",
            "description": null
        },
        {
            "id": "http-client-install",
            "name": "HTTP Client: Install",
            "description": null
        },
        {
            "id": "http-client-create-scoped-client",
            "name": "HTTP Client: Create scoped client",
            "description": null
        },
        {
            "id": "http-client-set-ls-api-key",
            "name": "HTTP Client: Set LS API key",
            "description": null
        },
        {
            "id": "checkout-create-action",
            "name": "Checkout: Create action",
            "description": null
        },
        {
            "id": "checkout-link-from-cart",
            "name": "Checkout: Link from cart",
            "description": null
        },
        {
            "id": "checkout-inject-deps-to-action",
            "name": "Checkout: Inject deps to action",
            "description": null
        },
        {
            "id": "checkout-create-ls-checkout-url",
            "name": "Checkout: Create LS checkout URL",
            "description": null
        },
        {
            "id": "checkout-fix-injecting-ls-http-client-with-target",
            "name": "Checkout: Fix injecting LS HTTP client with #Target",
            "description": null
        },
        {
            "id": "checkout-debug-response-content",
            "name": "Checkout: Debug response content",
            "description": null
        },
        {
            "id": "checkout-debug-without-throwing",
            "name": "Checkout: Debug without throwing",
            "description": null
        },
        {
            "id": "checkout-set-store-id-as-int",
            "name": "Checkout: Set store ID as int",
            "description": null
        },
        {
            "id": "checkout-set-store-id-as-string",
            "name": "Checkout: Set store ID as string",
            "description": null
        },
        {
            "id": "checkout-set-variant-id-as-string",
            "name": "Checkout: Set variant ID as string",
            "description": null
        },
        {
            "id": "checkout-comment-out-dd",
            "name": "Checkout: Comment out dd()",
            "description": null
        },
        {
            "id": "dynamic-checkout-move-store-id-to-env-var",
            "name": "Dynamic checkout: Move store ID to env var",
            "description": null
        },
        {
            "id": "dynamic-checkout-generate-product-lsvariantid-property",
            "name": "Dynamic checkout: Generate Product::lsVariantId property",
            "description": null
        },
        {
            "id": "dynamic-checkout-make-lsvariantid-unique",
            "name": "Dynamic checkout: Make $lsVariantId unique",
            "description": null
        },
        {
            "id": "dynamic-checkout-generate-migration",
            "name": "Dynamic checkout: Generate migration",
            "description": null
        },
        {
            "id": "dynamic-checkout-set-variant-ids-in-fixtures",
            "name": "Dynamic checkout: Set variant IDs in fixtures",
            "description": null
        },
        {
            "id": "dynamic-checkout-set-dynamic-variant-id-on-checkout",
            "name": "Dynamic checkout: Set dynamic variant ID on checkout",
            "description": null
        },
        {
            "id": "dynamic-checkout-set-variant-quantity",
            "name": "Dynamic checkout: Set variant quantity",
            "description": null
        },
        {
            "id": "dynamic-checkout-typecast-variant-id-to-int",
            "name": "Dynamic checkout: Typecast variant ID to int",
            "description": null
        },
        {
            "id": "delete",
            "name": "DELETE",
            "description": null
        },
        {
            "id": "prefill-user-data-inject-user",
            "name": "Prefill user data: Inject user",
            "description": null
        },
        {
            "id": "prefill-user-data-move-attributes-to-var",
            "name": "Prefill user data: Move attributes to var",
            "description": null
        },
        {
            "id": "prefill-user-data-set-user-name-and-email",
            "name": "Prefill user data: Set user name and email",
            "description": null
        },
        {
            "id": "buy-multiple-refactor-variant-quantity-setting-for-1",
            "name": "Buy multiple: Refactor variant quantity setting for 1",
            "description": null
        },
        {
            "id": "buy-multiple-implement-for-more-than-1",
            "name": "Buy multiple: Implement for more than 1",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-create-success-action",
            "name": "Clear cart after purchase: Create success action",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-inject-request",
            "name": "Clear cart after purchase: Inject request",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-check-for-referer",
            "name": "Clear cart after purchase: Check for referer",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-inject-cart",
            "name": "Clear cart after purchase: Inject cart",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-check-for-empty-cart",
            "name": "Clear cart after purchase: Check for empty cart",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-clear-the-cart",
            "name": "Clear cart after purchase: Clear the cart",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-add-flash-and-redirect",
            "name": "Clear cart after purchase: Add flash and redirect",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-set-redirect-url",
            "name": "Clear cart after purchase: Set redirect URL",
            "description": null
        },
        {
            "id": "centralize-ls-logic-create-api-service",
            "name": "Centralize LS logic: Create API service",
            "description": null
        },
        {
            "id": "centralize-ls-logic-move-createcheckouturl",
            "name": "Centralize LS logic: Move createCheckoutUrl()",
            "description": null
        },
        {
            "id": "centralize-ls-logic-inject-deps",
            "name": "Centralize LS logic: Inject deps",
            "description": null
        },
        {
            "id": "centralize-ls-logic-inject-and-use-ls-api",
            "name": "Centralize LS logic: Inject and use LS API",
            "description": null
        },
        {
            "id": "centralize-ls-logic-create-retrievestoreurl",
            "name": "Centralize LS logic: Create retrieveStoreUrl()",
            "description": null
        },
        {
            "id": "centralize-ls-logic-implement-retrievestoreurl",
            "name": "Centralize LS logic: Implement retrieveStoreUrl",
            "description": null
        },
        {
            "id": "centralize-ls-logic-inject-and-use-retrievestoreurl",
            "name": "Centralize LS logic: Inject and use retrieveStoreUrl()",
            "description": null
        },
        {
            "id": "webhooks-install-component",
            "name": "Webhooks: Install component",
            "description": null
        },
        {
            "id": "webhooks-make-webhook",
            "name": "Webhooks: Make webhook",
            "description": null
        },
        {
            "id": "webhooks-add-signing-secret-env-var",
            "name": "Webhooks: Add signing secret env var",
            "description": null
        },
        {
            "id": "webhooks-tweak-getrequestmatcher",
            "name": "Webhooks: Tweak getRequestMatcher()",
            "description": null
        },
        {
            "id": "webhooks-create-verifysignature",
            "name": "Webhooks: Create verifySignature()",
            "description": null
        },
        {
            "id": "webhooks-implement-verifysignature",
            "name": "Webhooks: Implement verifySignature()",
            "description": null
        },
        {
            "id": "webhooks-verify-signature",
            "name": "Webhooks: Verify signature",
            "description": null
        },
        {
            "id": "webhooks-parse-payload",
            "name": "Webhooks: Parse payload",
            "description": null
        },
        {
            "id": "webhooks-reject-if-bad-request",
            "name": "Webhooks: Reject if bad request",
            "description": null
        },
        {
            "id": "webhooks-reject-if-unsupported-event",
            "name": "Webhooks: Reject if unsupported event",
            "description": null
        },
        {
            "id": "webhooks-return-remoteevent",
            "name": "Webhooks: Return RemoteEvent",
            "description": null
        },
        {
            "id": "webhooks-make-user-required-arg-on-createcheckouturl",
            "name": "Webhooks: Make user required arg on createCheckoutUrl()",
            "description": null
        },
        {
            "id": "webhooks-set-user-as-custom-checkout-data",
            "name": "Webhooks: Set user as custom checkout data",
            "description": null
        },
        {
            "id": "webhooks-fetch-user-id-from-payload",
            "name": "Webhooks: Fetch user ID from payload",
            "description": null
        },
        {
            "id": "webhooks-inject-entity-manager",
            "name": "Webhooks: Inject entity manager",
            "description": null
        },
        {
            "id": "webhooks-find-corresponding-user",
            "name": "Webhooks: Find corresponding user",
            "description": null
        },
        {
            "id": "webhooks-match-order-created-event",
            "name": "Webhooks: Match order_created event",
            "description": null
        },
        {
            "id": "webhooks-fetch-customer-id-from-payload",
            "name": "Webhooks: Fetch customer ID from payload",
            "description": null
        },
        {
            "id": "webhooks-create-customerid-field",
            "name": "Webhooks: Create customerId field",
            "description": null
        },
        {
            "id": "webhooks-generate-migration",
            "name": "Webhooks: Generate migration",
            "description": null
        },
        {
            "id": "webhooks-save-customer-id-on-user",
            "name": "Webhooks: Save customer ID on User",
            "description": null
        },
        {
            "id": "webhooks-typecast-user-id-to-string",
            "name": "Webhooks: Typecast user ID to string",
            "description": null
        },
        {
            "id": "testing-webhooks-install-package",
            "name": "Testing webhooks: Install package",
            "description": null
        },
        {
            "id": "testing-webhooks-create-test",
            "name": "Testing webhooks: Create test",
            "description": null
        },
        {
            "id": "testing-webhooks-rename-and-clean-up-test",
            "name": "Testing webhooks: Rename and clean up test",
            "description": null
        },
        {
            "id": "testing-webhooks-reset-database",
            "name": "Testing webhooks: Reset database",
            "description": null
        },
        {
            "id": "testing-webhooks-create-fixture",
            "name": "Testing webhooks: Create fixture",
            "description": null
        },
        {
            "id": "testing-webhooks-request-to-proper-url",
            "name": "Testing webhooks: Request to proper URL",
            "description": null
        },
        {
            "id": "testing-webhooks-create-webhook-payload",
            "name": "Testing webhooks: Create webhook payload",
            "description": null
        },
        {
            "id": "testing-webhooks-get-payload-content",
            "name": "Testing webhooks: Get payload content",
            "description": null
        },
        {
            "id": "testing-webhooks-add-more-assertions",
            "name": "Testing webhooks: Add more assertions",
            "description": null
        },
        {
            "id": "testing-webhooks-add-signature",
            "name": "Testing webhooks: Add signature",
            "description": null
        },
        {
            "id": "testing-webhooks-dynamically-replace-data-in-payload",
            "name": "Testing webhooks: Dynamically replace data in payload",
            "description": null
        },
        {
            "id": "ls-orders-create-listorders",
            "name": "LS orders: Create listOrders()",
            "description": null
        },
        {
            "id": "ls-orders-send-api-request",
            "name": "LS orders: Send API request",
            "description": null
        },
        {
            "id": "ls-orders-add-query-filter-params",
            "name": "LS orders: Add query filter params",
            "description": null
        },
        {
            "id": "ls-orders-inject-deps-to-account",
            "name": "LS orders: Inject deps to account()",
            "description": null
        },
        {
            "id": "ls-orders-call-the-api-method",
            "name": "LS orders: Call the API method",
            "description": null
        }
    ],
    "sha": "89df364e23a8d91f04d0b6cb109f868e71e01635"
}