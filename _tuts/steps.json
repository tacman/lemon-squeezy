{
    "steps": [
        {
            "id": "start",
            "name": "start",
            "description": null
        },
        {
            "id": "http-client-install",
            "name": "HTTP Client: Install",
            "description": null
        },
        {
            "id": "http-client-create-scoped-client",
            "name": "HTTP Client: Create scoped client",
            "description": null
        },
        {
            "id": "http-client-set-ls-api-key",
            "name": "HTTP Client: Set LS API key",
            "description": null
        },
        {
            "id": "checkout-create-action",
            "name": "Checkout: Create action",
            "description": null
        },
        {
            "id": "checkout-link-from-cart",
            "name": "Checkout: Link from cart",
            "description": null
        },
        {
            "id": "checkout-inject-deps-to-action",
            "name": "Checkout: Inject deps to action",
            "description": null
        },
        {
            "id": "checkout-create-ls-checkout-url",
            "name": "Checkout: Create LS checkout URL",
            "description": null
        },
        {
            "id": "checkout-fix-injecting-ls-http-client-with-target",
            "name": "Checkout: Fix injecting LS HTTP client with #Target",
            "description": null
        },
        {
            "id": "checkout-debug-response-content",
            "name": "Checkout: Debug response content",
            "description": null
        },
        {
            "id": "checkout-debug-without-throwing",
            "name": "Checkout: Debug without throwing",
            "description": null
        },
        {
            "id": "checkout-set-store-id-as-int",
            "name": "Checkout: Set store ID as int",
            "description": null
        },
        {
            "id": "checkout-set-store-id-as-string",
            "name": "Checkout: Set store ID as string",
            "description": null
        },
        {
            "id": "checkout-set-variant-id-as-string",
            "name": "Checkout: Set variant ID as string",
            "description": null
        },
        {
            "id": "checkout-comment-out-dd",
            "name": "Checkout: Comment out dd()",
            "description": null
        },
        {
            "id": "dynamic-checkout-move-store-id-to-env-var",
            "name": "Dynamic checkout: Move store ID to env var",
            "description": null
        },
        {
            "id": "dynamic-checkout-generate-product-lsvariantid-property",
            "name": "Dynamic checkout: Generate Product::lsVariantId property",
            "description": null
        },
        {
            "id": "dynamic-checkout-make-lsvariantid-unique",
            "name": "Dynamic checkout: Make $lsVariantId unique",
            "description": null
        },
        {
            "id": "dynamic-checkout-generate-migration",
            "name": "Dynamic checkout: Generate migration",
            "description": null
        },
        {
            "id": "dynamic-checkout-set-variant-ids-in-fixtures",
            "name": "Dynamic checkout: Set variant IDs in fixtures",
            "description": null
        },
        {
            "id": "dynamic-checkout-set-dynamic-variant-id-on-checkout",
            "name": "Dynamic checkout: Set dynamic variant ID on checkout",
            "description": null
        },
        {
            "id": "dynamic-checkout-set-variant-quantity",
            "name": "Dynamic checkout: Set variant quantity",
            "description": null
        },
        {
            "id": "dynamic-checkout-typecast-variant-id-to-int",
            "name": "Dynamic checkout: Typecast variant ID to int",
            "description": null
        },
        {
            "id": "delete",
            "name": "DELETE",
            "description": null
        },
        {
            "id": "prefill-user-data-inject-user",
            "name": "Prefill user data: Inject user",
            "description": null
        },
        {
            "id": "prefill-user-data-move-attributes-to-var",
            "name": "Prefill user data: Move attributes to var",
            "description": null
        },
        {
            "id": "prefill-user-data-set-user-name-and-email",
            "name": "Prefill user data: Set user name and email",
            "description": null
        },
        {
            "id": "buy-multiple-refactor-variant-quantity-setting-for-1",
            "name": "Buy multiple: Refactor variant quantity setting for 1",
            "description": null
        },
        {
            "id": "buy-multiple-implement-for-more-than-1",
            "name": "Buy multiple: Implement for more than 1",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-create-success-action",
            "name": "Clear cart after purchase: Create success action",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-inject-request",
            "name": "Clear cart after purchase: Inject request",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-check-for-referer",
            "name": "Clear cart after purchase: Check for referer",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-inject-cart",
            "name": "Clear cart after purchase: Inject cart",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-check-for-empty-cart",
            "name": "Clear cart after purchase: Check for empty cart",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-clear-the-cart",
            "name": "Clear cart after purchase: Clear the cart",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-add-flash-and-redirect",
            "name": "Clear cart after purchase: Add flash and redirect",
            "description": null
        },
        {
            "id": "clear-cart-after-purchase-set-redirect-url",
            "name": "Clear cart after purchase: Set redirect URL",
            "description": null
        },
        {
            "id": "centralize-ls-logic-create-api-service",
            "name": "Centralize LS logic: Create API service",
            "description": null
        },
        {
            "id": "centralize-ls-logic-move-createcheckouturl",
            "name": "Centralize LS logic: Move createCheckoutUrl()",
            "description": null
        },
        {
            "id": "centralize-ls-logic-inject-deps",
            "name": "Centralize LS logic: Inject deps",
            "description": null
        },
        {
            "id": "centralize-ls-logic-inject-and-use-ls-api",
            "name": "Centralize LS logic: Inject and use LS API",
            "description": null
        },
        {
            "id": "centralize-ls-logic-create-retrievestoreurl",
            "name": "Centralize LS logic: Create retrieveStoreUrl()",
            "description": null
        },
        {
            "id": "centralize-ls-logic-implement-retrievestoreurl",
            "name": "Centralize LS logic: Implement retrieveStoreUrl",
            "description": null
        },
        {
            "id": "centralize-ls-logic-inject-and-use-retrievestoreurl",
            "name": "Centralize LS logic: Inject and use retrieveStoreUrl()",
            "description": null
        },
        {
            "id": "webhooks-install-component",
            "name": "Webhooks: Install component",
            "description": null
        },
        {
            "id": "webhooks-make-webhook",
            "name": "Webhooks: Make webhook",
            "description": null
        },
        {
            "id": "webhooks-add-signing-secret-env-var",
            "name": "Webhooks: Add signing secret env var",
            "description": null
        },
        {
            "id": "webhooks-tweak-getrequestmatcher",
            "name": "Webhooks: Tweak getRequestMatcher()",
            "description": null
        },
        {
            "id": "webhooks-create-verifysignature",
            "name": "Webhooks: Create verifySignature()",
            "description": null
        },
        {
            "id": "webhooks-implement-verifysignature",
            "name": "Webhooks: Implement verifySignature()",
            "description": null
        },
        {
            "id": "webhooks-verify-signature",
            "name": "Webhooks: Verify signature",
            "description": null
        },
        {
            "id": "webhooks-parse-payload",
            "name": "Webhooks: Parse payload",
            "description": null
        },
        {
            "id": "webhooks-reject-if-bad-request",
            "name": "Webhooks: Reject if bad request",
            "description": null
        },
        {
            "id": "webhooks-reject-if-unsupported-event",
            "name": "Webhooks: Reject if unsupported event",
            "description": null
        },
        {
            "id": "webhooks-return-remoteevent",
            "name": "Webhooks: Return RemoteEvent",
            "description": null
        },
        {
            "id": "webhooks-make-user-required-arg-on-createcheckouturl",
            "name": "Webhooks: Make user required arg on createCheckoutUrl()",
            "description": null
        },
        {
            "id": "webhooks-set-user-as-custom-checkout-data",
            "name": "Webhooks: Set user as custom checkout data",
            "description": null
        },
        {
            "id": "webhooks-fetch-user-id-from-payload",
            "name": "Webhooks: Fetch user ID from payload",
            "description": null
        },
        {
            "id": "webhooks-inject-entity-manager",
            "name": "Webhooks: Inject entity manager",
            "description": null
        },
        {
            "id": "webhooks-find-corresponding-user",
            "name": "Webhooks: Find corresponding user",
            "description": null
        },
        {
            "id": "webhooks-match-order-created-event",
            "name": "Webhooks: Match order_created event",
            "description": null
        },
        {
            "id": "webhooks-fetch-customer-id-from-payload",
            "name": "Webhooks: Fetch customer ID from payload",
            "description": null
        },
        {
            "id": "webhooks-create-customerid-field",
            "name": "Webhooks: Create customerId field",
            "description": null
        },
        {
            "id": "webhooks-generate-migration",
            "name": "Webhooks: Generate migration",
            "description": null
        },
        {
            "id": "webhooks-save-customer-id-on-user",
            "name": "Webhooks: Save customer ID on User",
            "description": null
        },
        {
            "id": "webhooks-typecast-user-id-to-string",
            "name": "Webhooks: Typecast user ID to string",
            "description": null
        },
        {
            "id": "testing-webhooks-install-package",
            "name": "Testing webhooks: Install package",
            "description": null
        },
        {
            "id": "testing-webhooks-create-test",
            "name": "Testing webhooks: Create test",
            "description": null
        },
        {
            "id": "testing-webhooks-rename-and-clean-up-test",
            "name": "Testing webhooks: Rename and clean up test",
            "description": null
        },
        {
            "id": "testing-webhooks-reset-database",
            "name": "Testing webhooks: Reset database",
            "description": null
        },
        {
            "id": "testing-webhooks-create-fixture",
            "name": "Testing webhooks: Create fixture",
            "description": null
        },
        {
            "id": "testing-webhooks-request-to-proper-url",
            "name": "Testing webhooks: Request to proper URL",
            "description": null
        },
        {
            "id": "testing-webhooks-create-webhook-payload",
            "name": "Testing webhooks: Create webhook payload",
            "description": null
        },
        {
            "id": "testing-webhooks-get-payload-content",
            "name": "Testing webhooks: Get payload content",
            "description": null
        },
        {
            "id": "testing-webhooks-add-more-assertions",
            "name": "Testing webhooks: Add more assertions",
            "description": null
        },
        {
            "id": "testing-webhooks-add-signature",
            "name": "Testing webhooks: Add signature",
            "description": null
        },
        {
            "id": "testing-webhooks-dynamically-replace-data-in-payload",
            "name": "Testing webhooks: Dynamically replace data in payload",
            "description": null
        },
        {
            "id": "ls-orders-create-listorders",
            "name": "LS orders: Create listOrders()",
            "description": null
        },
        {
            "id": "ls-orders-send-api-request",
            "name": "LS orders: Send API request",
            "description": null
        },
        {
            "id": "ls-orders-add-query-filter-params",
            "name": "LS orders: Add query filter params",
            "description": null
        },
        {
            "id": "ls-orders-inject-deps-to-account",
            "name": "LS orders: Inject deps to account()",
            "description": null
        },
        {
            "id": "ls-orders-call-the-api-method",
            "name": "LS orders: Call the API method",
            "description": null
        },
        {
            "id": "ls-orders-render-order-table",
            "name": "LS orders: Render order table",
            "description": null
        },
        {
            "id": "ls-orders-render-dynamic-data",
            "name": "LS orders: Render dynamic data",
            "description": null
        },
        {
            "id": "ls-orders-add-pagination",
            "name": "LS orders: Add pagination",
            "description": null
        },
        {
            "id": "ls-orders-render-link-to-all-orders",
            "name": "LS orders: Render link to all orders",
            "description": null
        },
        {
            "id": "prevent-leaking-orders-create-retrievecustomer",
            "name": "Prevent leaking orders: Create retrieveCustomer()",
            "description": null
        },
        {
            "id": "prevent-leaking-orders-fetch-customer",
            "name": "Prevent leaking orders: Fetch customer",
            "description": null
        },
        {
            "id": "prevent-leaking-orders-move-email-to-a-var",
            "name": "Prevent leaking orders: Move email to a var",
            "description": null
        },
        {
            "id": "prevent-leaking-orders-fetch-email-from-customer",
            "name": "Prevent leaking orders: Fetch email from customer",
            "description": null
        },
        {
            "id": "error-handling-remove-string-typecast",
            "name": "Error handling: Remove string typecast",
            "description": null
        },
        {
            "id": "error-handling-dump-content",
            "name": "Error handling: Dump content",
            "description": null
        },
        {
            "id": "error-handling-create-request",
            "name": "Error handling: Create request()",
            "description": null
        },
        {
            "id": "error-handling-add-try-catch",
            "name": "Error handling: Add try-catch",
            "description": null
        },
        {
            "id": "error-handling-dump-in-catch",
            "name": "Error handling: Dump in catch",
            "description": null
        },
        {
            "id": "error-handling-use-new-method",
            "name": "Error handling: Use new method",
            "description": null
        },
        {
            "id": "error-handling-comment-out-dump",
            "name": "Error handling: Comment out dump",
            "description": null
        },
        {
            "id": "error-handling-combile-an-error-and-throw-it",
            "name": "Error handling: Combile an error and throw it",
            "description": null
        },
        {
            "id": "error-handling-revert-string-typecasting",
            "name": "Error handling: Revert string typecasting",
            "description": null
        },
        {
            "id": "error-handling-simplify-code",
            "name": "Error handling: Simplify code",
            "description": null
        },
        {
            "id": "error-handling-call-private-request-everywhere",
            "name": "Error handling: Call private request() everywhere",
            "description": null
        },
        {
            "id": "checkout-overlay-include-lemon-js",
            "name": "Checkout overlay: Include Lemon.js",
            "description": null
        },
        {
            "id": "checkout-overlay-add-css-class-to-checkout-btn",
            "name": "Checkout overlay: Add CSS class to checkout btn",
            "description": null
        },
        {
            "id": "checkout-overlay-remove-css-class",
            "name": "Checkout overlay: Remove CSS class",
            "description": null
        },
        {
            "id": "checkout-overlay-create-stimulus-controller",
            "name": "Checkout overlay: Create Stimulus controller",
            "description": null
        },
        {
            "id": "checkout-overlay-add-openoverlay",
            "name": "Checkout overlay: Add openOverlay()",
            "description": null
        },
        {
            "id": "checkout-overlay-set-controller-and-action-attrs",
            "name": "Checkout overlay: Set controller and action attrs",
            "description": null
        },
        {
            "id": "checkout-overlay-create-createcheckout",
            "name": "Checkout overlay: Create createCheckout()",
            "description": null
        },
        {
            "id": "checkout-overlay-add-stimulus-value",
            "name": "Checkout overlay: Add Stimulus value",
            "description": null
        },
        {
            "id": "checkout-overlay-prevent-default-in-openoverlay",
            "name": "Checkout overlay: Prevent default in openOverlay()",
            "description": null
        },
        {
            "id": "checkout-overlay-fetch-checkout-url-and-handle-response",
            "name": "Checkout overlay: Fetch checkout URL and handle response",
            "description": null
        },
        {
            "id": "checkout-overlay-disable-and-enable-the-link",
            "name": "Checkout overlay: Disable and enable the link",
            "description": null
        },
        {
            "id": "checkout-overlay-enable-embed-mode",
            "name": "Checkout overlay: Enable embed mode",
            "description": null
        },
        {
            "id": "checkout-overlay-embed-as-argument",
            "name": "Checkout overlay: Embed as argument",
            "description": null
        },
        {
            "id": "checkout-overlay-dynamic-script-including",
            "name": "Checkout overlay: Dynamic script including",
            "description": null
        },
        {
            "id": "checkout-overlay-drop-script-from-javascripts-block",
            "name": "Checkout overlay: Drop script from javascripts block",
            "description": null
        },
        {
            "id": "fix-non-authed-debug-response",
            "name": "Fix non-authed: Debug response",
            "description": null
        },
        {
            "id": "fix-non-authed-redirect-user-with-js",
            "name": "Fix non-authed: Redirect user with JS",
            "description": null
        },
        {
            "id": "fix-non-authed-redirect-on-authentication-success",
            "name": "Fix non-authed: Redirect on authentication success",
            "description": null
        },
        {
            "id": "js-events-listen-for-checkout-success-event",
            "name": "JS events: Listen for checkout success event",
            "description": null
        },
        {
            "id": "js-events-create-handlecheckout-action",
            "name": "JS events: Create handleCheckout() action",
            "description": null
        },
        {
            "id": "js-events-get-customer-id-and-set-on-user",
            "name": "JS events: Get customer ID and set on user",
            "description": null
        },
        {
            "id": "js-events-inject-entity-manager",
            "name": "JS events: Inject entity manager",
            "description": null
        },
        {
            "id": "js-events-flush-and-return-the-response",
            "name": "JS events: Flush and return the response",
            "description": null
        },
        {
            "id": "js-events-add-new-stimulus-value",
            "name": "JS events: Add new Stimulus value",
            "description": null
        },
        {
            "id": "js-events-fetch-and-handle-data",
            "name": "JS events: Fetch and handle data",
            "description": null
        },
        {
            "id": "js-events-wrap-ls-setup-to-wait-for-load",
            "name": "JS events: Wrap LS setup to wait for load",
            "description": null
        },
        {
            "id": "js-events-create-ls-instance",
            "name": "JS events: Create LS instance",
            "description": null
        },
        {
            "id": "js-events-dump-response-data",
            "name": "JS events: Dump response data",
            "description": null
        },
        {
            "id": "js-events-fix-path-to-the-customer-id",
            "name": "JS events: Fix path to the customer ID",
            "description": null
        },
        {
            "id": "js-events-comment-out-console-log",
            "name": "JS events: Comment out console.log()",
            "description": null
        },
        {
            "id": "js-events-get-user-id-from-the-response",
            "name": "JS events: Get user ID from the response",
            "description": null
        },
        {
            "id": "js-events-pass-user-id",
            "name": "JS events: Pass user ID",
            "description": null
        },
        {
            "id": "js-events-throw-on-user-id-mismatch",
            "name": "JS events: Throw on user ID mismatch",
            "description": null
        }
    ],
    "sha": "5b303c651920ad9e317522b078a6db179b106a83"
}